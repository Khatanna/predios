# Types
type UserToProperty {
  property: Property
  user: User
}

type Property {
  id: ID!
  registryNumber: Int
  name: String!
  area: String
  expertiseOfArea: String
  plots: Int
  bodies: Int
  sheets: Int
  code: String
  codeOfSearch: String
  agrupationIdentifier: String
  secondState: String
  polygone: String
  observations: [Observation]!
  beneficiaries: [Beneficiary]!
  activity: Activity
  clasification: Clasification
  state: State
  groupedState: GroupedState
  city: City
  province: Province
  municipality: Municipality
  folderLocation: FolderLocation
  technical: UserToProperty
  legal: UserToProperty
  type: Type
  responsibleUnit: Unit
  reference: Reference
  trackings: [Tracking]
  createdAt: String
  updatedAt: String
}

type getPropertyWithCursor {
  nextCursor: String
  property: Property
}

# Queries
type Query {
  getAllProperties: [Property]
  getProperty(nextCursor: String): getPropertyWithCursor
  getPropertyById(id: String): Property
  searchPropertyByAttribute(query: String): Property
  # permissionsWithUsers: [PermissionWithUser!]!
}

# Mutations
type Mutation {
  createProperty(input: PropertyInput): Property
}

input TrackingInput {
  stateName: String
  numberOfNote: String
  observation: String
  responsibleUsername: String
  dateOfInit: String
  dateOfEnd: String
}

# Input Types
input PropertyInput {
  name: String!
  area: String
  expertiseOfArea: String
  plots: Int
  bodies: Int
  sheets: Int
  code: String
  codeOfSearch: String
  agrupationIdentifier: String
  secondState: String
  polygone: String
  # observations: [Observation]!
  # beneficiaries: [Beneficiary]!
  activityName: String
  clasificationName: String
  stateName: String
  groupedStateName: String
  cityName: String
  provinceName: String
  municipalityName: String
  folderLocationName: String
  technicalUsername: String
  legalUsername: String
  typeName: String
  responsibleUnitName: String
  referenceName: String
  trackings: [TrackingInput]
}
