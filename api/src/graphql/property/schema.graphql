# Types
type UserToProperty {
  property: Property
  user: User
}

type Property {
  id: ID!
  registryNumber: Int
  name: String!
  area: String
  expertiseOfArea: String
  plots: Int
  bodies: Int
  sheets: Int
  code: String
  codeOfSearch: String
  agrupationIdentifier: String
  fileNumber: FileNumber
  secondState: String
  polygone: String
  technicalObservation: String
  observations: [Observation]!
  beneficiaries: [Beneficiary]!
  activity: Activity
  clasification: Clasification
  state: State
  groupedState: GroupedState
  city: City
  province: Province
  municipality: Municipality
  folderLocation: FolderLocation
  technical: UserToProperty
  legal: UserToProperty
  type: Type
  responsibleUnit: Unit
  reference: Reference
  trackings: [Tracking]
  createdAt: String
  updatedAt: String
}

type PropertiesPaginate {
  page: Int
  limit: Int
  total: Int
  properties: [Property]
}

type getPropertyWithCursor {
  prevCursor: String
  nextCursor: String
  total: Int
  property: Property
}

type getPropertyWithRegistryNumber {
  next: String
  prev: String
  property: Property
}

# Queries
type Query {
  getAllProperties: [Property]
  getProperties(
    page: Int
    limit: Int
    orderBy: String
    all: Boolean
  ): PropertiesPaginate
  getProperty(nextCursor: String, prevCursor: String): getPropertyWithCursor
  getPropertyByAttribute(page: Int
    limit: Int
    orderBy: String, fieldName: String, value: String): PropertiesPaginate
  getPropertyByRegistryNumber(id: String): getPropertyWithRegistryNumber
  getPropertyById(id: String): Property
  searchPropertyByAttribute(
    page: Int
    limit: Int
    orderBy: String
    code: String
    codeOfSearch: String
    agrupationIdentifier: String
    name: String
    beneficiary: String
  ): PropertiesPaginate
}

# Mutations
type Mutation {
  createProperty(input: PropertyInput): Property
  updateProperty(id: String, input: PropertyInput): Property
  updateField(id: String, fieldName: String, value: String): Property
  updateFieldNumber(id: String, fieldName: String, value: Int): Property
}

# input TrackingInput {
#   state: StateInput
#   numberOfNote: String
#   observation: String
#   responsible: UserInput
#   dateOfInit: String
# }

# Input Types
input PropertyInput {
  id: String
  name: String!
  area: String
  registryNumber: Int
  expertiseOfArea: String
  plots: Int
  bodies: Int
  sheets: Int
  code: String
  codeOfSearch: String
  agrupationIdentifier: String
  secondState: String
  polygone: String
  fileNumber: FileNumberInput
  technicalObservation: String
  observations: [ObservationInput]
  beneficiaries: [BeneficiaryInput]
  activity: ActivityInput
  clasification: ClasificationInput
  state: StateInput
  groupedState: GroupedStateInput
  city: CityInput
  province: ProvinceInput
  municipality: MunicipalityInput
  folderLocation: FolderLocationInput
  technical: UserToPropertyInput
  legal: UserToPropertyInput
  type: TypeInput
  responsibleUnit: UnitInput
  reference: ReferenceInput
  trackings: [TrackingInput]
}

input UserToPropertyInput {
  user: UserInput
}
