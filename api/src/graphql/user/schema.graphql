type PermissionOnUser {
  status: String!
  createdAt: String!
  permission: Permission
  user: User
}

# Types
type User {
  id: ID!
  names: String!
  firstLastName: String!
  secondLastName: String!
  username: String!
  password: String!
  permissions: [PermissionOnUser]!
  createdAt: String!
  updatedAt: String!
  connection: String!
  type: UserType
  status: String!
  role: Role
}

type getUserPagination {
  nextCursor: String
  prevCursor: String
  user: User
}

type UsersPaginate {
  nextCursor: String
  prevCursor: String
  total: Int
  users: [User]!
}

# Queries
type Query {
  getAllUsersPaginateWithCursor(
    nextCursor: String
    prevCursor: String
    numberOfResults: Int
    filterText: String
  ): UsersPaginate
  getAllUsers(filterText: String): [User]
  getUsers(type: String, filterText: String): [User]!
  getUserById(id: ID): User
  getUserByUsername(username: String): User
  getUser(nextCursor: String, prevCursor: String): getUserPagination
}

type UserUpdatePermission {
  created: Boolean
  permissions: [PermissionOnUser]
}

type UserPermissionUpdate {
  updated: Boolean
  permission: PermissionOnUser
}

type UserPermissionDelete {
  deleted: Boolean
  permission: PermissionOnUser
}

type UserStatusChangeMany {
  users: [User!]
  count: Int
}

# Mutations
type Mutation {
  createUser(input: UserInput): User
  updateUserByUsername(username: String, input: UserInput): User
  updateUserById(id: ID, input: UserInput): User
  updateStateUserByUsername(username: String, input: UserInput): User
  updateStateOfPermissionUserByUsername(
    input: UpdateStateOfPermissionUserByUsernameInput
  ): UserPermissionUpdate
  updateStateUsersByUsername(
    input: UpdateStateOfPermissionUsersByUsernameInput
  ): UserStatusChangeMany
  deleteUserById(id: ID): User
  deleteUserByUsername(username: String): User
  deletePermissionOfUserByUsername(
    input: DeletePermissionOfUserByUsernameInput
  ): UserPermissionDelete
  createPermissionForUser(
    input: UpdatePermissionsUserByUsernameInput
  ): UserUpdatePermission
}

# Input types
input UserInput {
  names: String
  firstLastName: String
  secondLastName: String
  username: String
  password: String
  connection: String
  permissions: [CreatePermissionInput]
  type: UserTypeInput
  status: String
  role: RoleInput
}

input PermissionsInput {
  resource: String
  levels: [String!]
}

input PermissionInput {
  status: String
  resource: String
  level: String
}

input UpdatePermissionsUserByUsernameInput {
  username: String!
  data: [PermissionsInput]!
}

input UpdateStateOfPermissionUserByUsernameInput {
  username: String!
  data: PermissionInput
}

input UpdateStateOfPermissionUsersByUsernameInput {
  usernames: [String]!
  status: String!
}

input DeletePermissionOfUserByUsernameInput {
  username: String!
  data: PermissionInput
}
