type PermissionOnUser {
  status: String!
  createdAt: String!
  permission: Permission
  user: User
}

# Types
type User {
  id: ID!
  names: String!
  firstLastName: String!
  secondLastName: String!
  username: String!
  password: String!
  permissions: [PermissionOnUser]!
  createdAt: String!
  updatedAt: String!
  connection: String!
  typeId: String
  type: UserType
  status: String!
}

type getUserPagination {
  nextCursor: String
  prevCursor: String
  user: User
}

type UsersPaginate {
  nextCursor: String
  prevCursor: String
  total: Int
  users: [User]!
}

# Queries
type Query {
  getAllUsers(nextCursor: String, prevCursor: String, numberOfResults: Int, filterText: String): UsersPaginate
  getUsers(type: String, filterText: String): [User]!
  getUserById(id: ID): User
  getUserByUsername(username: String): User
  getUser(nextCursor: String, prevCursor: String): getUserPagination
}

type UserUpdatePermission {
  created: Boolean
  permissions: [PermissionOnUser]
}

type UserPermissionUpdate {
  updated: Boolean
  permission: PermissionOnUser
}

type UserPermissionDelete {
  deleted: Boolean
  permission: PermissionOnUser
}

type UserStatusChangeMany {
  users: [User!]
  count: Int
}

# Mutations
type Mutation {
  createUser(input: CreateUserInput): User
  updateUserByUsername(input: UpdateUserByUsernameInput): User
  updateUserById(input: ForUpdateUserById): User
  updateStateUserByUsername(input: UpdateUserByUsernameInput): User
  updateStateOfPermissionUserByUsername(input: UpdateStateOfPermissionUserByUsernameInput): UserPermissionUpdate
  updateStateUsersByUsername(input: UpdateStateOfPermissionUsersByUsernameInput): UserStatusChangeMany
  deleteUserById(id: ID): User
  deleteUserByUsername(username: String): User
  deletePermissionOfUserByUsername(input: DeletePermissionOfUserByUsernameInput): UserPermissionDelete
  createPermissionForUser(
    input: UpdatePermissionsUserByUsernameInput
  ): UserUpdatePermission
}

# Input types
input CreateUserInput {
  names: String!
  firstLastName: String!
  secondLastName: String!
  username: String!
  password: String!
  type: UserTypeInput
  status: String
}

input UpdateUserInput {
  names: String
  firstLastName: String
  secondLastName: String
  username: String
  password: String
  typeId: String
  status: String
  permissions: [CreatePermissionInput]
  createdAt: String
  updatedAt: String
  type: CreateTypeUserInput
}

input ForUpdateUserById {
  id: ID!
  data: UpdateUserInput
}

input UpdateUserByUsernameInput {
  username: String!
  data: UpdateUserInput
}

input PermissionsInput {
  resource: String
  levels: [String!]
}

input PermissionInput {
  status: String
  resource: String
  level: String
}

input UpdatePermissionsUserByUsernameInput {
  username: String!
  data: [PermissionsInput]!
}

input UpdateStateOfPermissionUserByUsernameInput {
  username: String!
  data: PermissionInput
}

input UpdateStateOfPermissionUsersByUsernameInput {
  usernames: [String]!
  status: String!
}

input DeletePermissionOfUserByUsernameInput {
  username: String!
  data: PermissionInput
}