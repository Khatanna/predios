generator client {
  provider = "prisma-client-js"

  // binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ENABLE  @map("habilitado")
  DISABLE @map("deshabilitado")

  @@map("estado")
}

enum LevelPermission {
  CREATE @map("escritura")
  READ   @map("lectura")
  UPDATE @map("actualización")
  DELETE @map("eliminación")

  @@map("tipo_de_permiso")
}

enum Resource {
  USER         @map("usuario")
  PROPERTY     @map("predio")
  BENEFICIARY  @map("beneficiario")
  CITY         @map("departamento")
  PROVINCE     @map("provincia")
  MUNICIPALITY @map("municipio")

  USER_PERMISSION @map("permiso_de_usuario")
  CLASIFICATION   @map("clasificación")
  ACTIVITY        @map("actividad")
  OBSERVATION     @map("observación")
  PERMISSION      @map("permiso")
  USERTYPE        @map("tipo_de_usuario")

  TYPE          @map("tipo")
  SUB_DIRECTORY @map("sub_carpeta")

  @@map("recurso")
}

model User {
  id             String           @id @default(uuid())
  names          String?          @map("nombre") @db.VarChar(30)
  firstLastName  String?          @map("apellido_paterno") @db.VarChar(50)
  secondLastName String?          @map("apellido_materno") @db.VarChar(50)
  username       String           @unique @map("nombre_de_usuario") @db.VarChar(20)
  password       String           @map("contraseña") @db.MediumText
  typeId         String           @map("tipo_id")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  session        Session?
  permissions    UserPermission[]
  type           UserType         @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         Status           @default(ENABLE) @map("estado")
  records        Record[]

  @@map("usuario")
}

model DeletedUser {
  id             String   @id @default(uuid())
  names          String?  @map("nombre") @db.VarChar(30)
  firstLastName  String?  @map("apellido_paterno") @db.VarChar(50)
  secondLastName String?  @map("apellido_materno") @db.VarChar(50)
  username       String   @unique @map("nombre_de_usuario") @db.VarChar(20)
  typeId         String?  @map("tipo_id")
  deletedAt      DateTime @default(now())
  reason         String? // Puedes agregar un campo para registrar la razón de la eliminación.
  status         Status   @default(ENABLE) @map("estado")

  @@map("usuario_eliminado")
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @map("nombre")
  level       LevelPermission  @map("nivel_de_acceso")
  resource    Resource         @map("recurso")
  description String           @map("descripcion")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserPermission[]
  status      Status           @default(ENABLE) @map("estado")

  @@unique([resource, level])
  @@index([resource, level])
  @@map("permiso")
}

model UserPermission {
  id           String     @id @default(uuid())
  status       Status     @default(ENABLE) @map("estado")
  userId       String     @map("usuario_id")
  permissionId String     @map("permiso_id")
  expires      Expires?
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // UserDeleted   UserDeleted? @relation(fields: [userDeletedId], references: [id])
  // userDeletedId String?

  @@unique([userId, permissionId])
  @@map("permiso_de_usuario")
}

model Expires {
  id               String         @id @default(uuid())
  userPermissionId String         @unique @map("expira")
  userPermission   UserPermission @relation(fields: [userPermissionId], references: [id], map: "expiracion")

  @@map("expiracion")
}

model UserType {
  id    String @id @default(uuid())
  name  String @unique @map("nombre")
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tipo_de_usuario")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @db.MediumText
  userId    String   @unique @map("usuario_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sesion")
}

model Property {
  id                   String           @id @default(uuid())
  name                 String           @default("Indefinido") @map("nombre") @db.MediumText
  area                 Decimal          @default(0) @map("superficie")
  expertiseOfArea      Decimal          @default(0) @map("superficie_de_pericia") // evaluar varias areas
  // technicalObservation String           @default("Sin observación") @map("observacion_tecnica") @db.MediumText
  // podemos poner mas observaciones
  plots                Int              @default(0) @map("parcelas")
  bodies               Int              @default(0) @map("cuerpos")
  sheets               Int              @default(0) @map("fojas")
  code                 String?          @unique @default("Sin codigo definido") @map("codigo") @db.VarChar(128) // es nullable pero tambie es unico
  codeOfSearch         String           @default("Sin codigo de busqueda definido") @map("codigo_de_busqueda") @db.VarChar(128)
  agrupacionIdentifier String           @default("Sin Id de agrupación definido") @map("id_de_agrupacion_social") @db.VarChar(64)
  secondState          String           @default("Sin estado definido") @map("estado_2") @db.VarChar(128)
  polygone             String           @map("poligono") @db.VarChar(32) // OJO
  observations         Observation[]
  beneficiaries        Beneficiary[]
  activity             Activity?
  clasification        Clasification?
  state                State?
  groupedState         GroupedState?
  // legal                Legal?
  localization         localization?
  subDirectory         SubDirectory?
  // technical            Technical?
  type                 Type?
  responsibleUnit      ResponsibleUnit?
  reference            Reference?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@map("predio")
}

enum ObervationType {
  TECHNICAL @map("tecnico")
  LEGAL     @map("juridico")
  STANDARD  @map("estandar")

  @@map("tipo_de_observación")
}

model Observation {
  id          String         @id @default(uuid())
  observation String         @map("observacion") @db.MediumText
  type        ObervationType @default(STANDARD) @map("tipo")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  propertyId  String         @map("predio_id")
  property    Property       @relation(fields: [propertyId], references: [id])

  @@map("observacion")
}

model Beneficiary {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(256)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]

  @@map("beneficiario")
}

model Reference {
  id         String   @id @default(uuid())
  name       String   @map("nombre") @db.VarChar(64)
  propertyId String   @unique() @map("usuario_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("referencia")
}

model State {
  id          Int      @id @default(autoincrement())
  description String   @map("descripcion") @db.LongText
  order       String   @map("orden") @db.VarChar(16)
  propertyId  String   @unique() @map("predio_id")
  property    Property @relation(fields: [propertyId], references: [id])
  stage       Stage?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("estado")
}

model Stage {
  id        Int      @id @default(autoincrement())
  name      String   @unique() @map("nombre") @db.VarChar(32)
  stateId   Int      @unique
  state     State    @relation(fields: [stateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("etapa")
}

model SubDirectory {
  id         Int      @id @default(autoincrement())
  name       String   @unique() @map("nombre") @db.VarChar(128)
  propertyId String   @unique @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("sub_carpeta")
}

model Type {
  id         Int      @id @default(autoincrement())
  name       String   @map("nombre") @db.VarChar(64)
  propertyId String   @unique() @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tipo")
}

model Activity {
  id         Int      @id @default(autoincrement())
  name       String   @map("nombre") @db.VarChar(64)
  propertyId String   @unique() @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("actividad")
}

model Clasification {
  id         Int      @id @default(autoincrement())
  name       String   @map("nombre") @db.VarChar(64)
  propertyId String   @unique() @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("clasificacion")
}

model ResponsibleUnit {
  id         Int      @id @default(autoincrement())
  name       String   @map("nombre") @db.VarChar(64)
  propertyId String   @unique() @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("unidad_responsable")
}

model GroupedState {
  id         Int      @id @default(autoincrement())
  name       String   @unique @map("nombre") @db.VarChar(128)
  propertyId String   @unique() @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("estado_agrupado")
}

model City {
  id           String        @id @default(uuid())
  name         String        @unique @map("nombre") @db.VarChar(32)
  provinces    Province[]
  localization localization?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("departamento")
}

model Province {
  id            String         @id @default(uuid())
  code          String         @unique @map("codigo") @db.VarChar(32)
  name          String         @unique @map("nombre") @db.VarChar(32)
  cityId        String         @map("departamento_id")
  municipalitys Municipality[]
  city          City           @relation(fields: [cityId], references: [id])
  localization  localization?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("provincia")
}

model Municipality {
  id           String        @id @default(uuid())
  name         String        @unique @map("nombre") @db.VarChar(32)
  provinceId   String        @map("provincia_id")
  province     Province      @relation(fields: [provinceId], references: [id])
  localization localization?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("municipio")
}

model localization {
  id             Int          @id @default(autoincrement())
  cityId         String       @unique() @map("departamento_id")
  provinceId     String       @unique() @map("provincia_id")
  municipalityId String       @unique() @map("municipio_id")
  propertyId     String       @unique() @map("predio_id")
  property       Property     @relation(fields: [propertyId], references: [id])
  city           City         @relation(fields: [cityId], references: [id])
  province       Province     @relation(fields: [provinceId], references: [id])
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localizacion")
}

model Record {
  id        String   @id @default(uuid())
  userId    String   @map("usuario_id")
  user      User     @relation(fields: [userId], references: [id])
  operation String   @map("operacion")
  resource  String   @map("recurso")
  result    Json     @map("resultado")
  ip        String   @map("direccion_ip")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("historial")
}
