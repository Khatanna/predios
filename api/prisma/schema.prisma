generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ENABLE  @map("habilitado")
  DISABLE @map("deshabilitado")

  @@map("estado")
}

enum StatusConnection {
  ONLINE  @map("en linea")
  OFFLINE @map("desconectado")
}

enum LevelPermission {
  CREATE @map("escritura")
  READ   @map("lectura")
  UPDATE @map("actualización")
  DELETE @map("eliminación")

  @@map("tipo_de_permiso")
}

enum Resource {
  USER              @map("usuario")
  PROPERTY          @map("predio")
  BENEFICIARY       @map("beneficiario")
  CITY              @map("departamento")
  PROVINCE          @map("provincia")
  MUNICIPALITY      @map("municipio")
  ROLEHASPERMISSION @map("permiso_de_usuario")
  ROLE              @map("rol")
  CLASIFICATION     @map("clasificación")
  ACTIVITY          @map("actividad")
  STATE             @map("estado")
  STAGE             @map("etapa")
  OBSERVATION       @map("observación")
  PERMISSION        @map("permiso")
  USERTYPE          @map("tipo_de_usuario")
  TYPE              @map("tipo")
  FOLDERLOCATION    @map("ubicacion_de_carpeta")
  RECORD            @map("historial")
  UNIT              @map("unidad")
  GROUPEDSTATE      @map("estado_agrupado")
  REFERENCE         @map("referencia")
  TRACKING          @map("seguimiento")

  @@map("recurso")
}

model Position {
  username  String @id
  contextId String
  positionX Int
  positionY Int

  @@map("posicion")
}

model User {
  id                    String                @id @default(uuid())
  names                 String?               @map("nombre") @db.VarChar(30)
  firstLastName         String?               @map("apellido_paterno") @db.VarChar(50)
  secondLastName        String?               @map("apellido_materno") @db.VarChar(50)
  username              String                @unique @map("nombre_de_usuario") @db.VarChar(20)
  password              String                @map("contraseña") @db.MediumText
  roleId                String                @map("rol_id")
  typeId                String                @map("tipo_id")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  token                 String?               @db.MediumText
  type                  UserType              @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  role                  Role                  @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  status                Status                @default(ENABLE) @map("estado")
  connection            StatusConnection      @default(OFFLINE) @map("estado_de_conexion")
  records               Record[]
  technicians           TechnicalOnProperty[]
  legal                 LegalOnProperty[]
  trackings             Tracking[]
  suscriptions          Subscription[]
  notificationsSent     Notification[]        @relation(name: "sends")
  notificationsReceived Notification[]        @relation(name: "received")

  @@map("usuario")
}

model Role {
  id          String              @id @default(uuid())
  name        String              @unique @map("nombre")
  users       User[]
  permissions RoleHasPermission[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model TechnicalOnProperty {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId String   @unique @map("predio_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String   @map("tecnico_id")

  @@unique([propertyId, userId])
  @@map("tecnicos_por_predio")
}

model LegalOnProperty {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId String   @unique @map("predio_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String   @map("juridico_id")

  @@unique([propertyId, userId])
  @@map("juridicos_por_predio")
}

model DeletedUser {
  id             String   @id @default(uuid())
  names          String?  @map("nombre") @db.VarChar(30)
  firstLastName  String?  @map("apellido_paterno") @db.VarChar(50)
  secondLastName String?  @map("apellido_materno") @db.VarChar(50)
  username       String   @unique @map("nombre_de_usuario") @db.VarChar(20)
  typeId         String?  @map("tipo_id")
  deletedAt      DateTime @default(now())
  reason         String? // Puedes agregar un campo para registrar la razón de la eliminación.
  status         Status   @default(ENABLE) @map("estado")

  @@map("usuario_eliminado")
}

model Permission {
  id          String              @id @default(uuid())
  name        String              @map("nombre")
  level       LevelPermission     @map("nivel_de_acceso")
  resource    Resource            @map("recurso")
  description String              @map("descripcion")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  status      Status              @default(ENABLE) @map("estado")
  roles       RoleHasPermission[]

  @@unique([resource, level])
  @@index([resource, level])
  @@map("permiso")
}

model RoleHasPermission {
  status       Status     @default(ENABLE) @map("estado")
  roleId       String     @map("rol_id")
  permissionId String     @map("permiso_id")
  role         Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([roleId, permissionId])
  // @@unique([roleId, permissionId])
  @@map("rol_permiso")
}

model UserType {
  id        String   @id @default(uuid())
  name      String   @unique @map("nombre")
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tipo_de_usuario")
}

model Property {
  id                   String               @id @default(uuid())
  registryNumber       Int                  @unique @default(autoincrement()) @map("numero_de_registro")
  name                 String               @map("nombre") @db.MediumText
  area                 String               @map("superficie")
  expertiseOfArea      String               @map("superficie_de_pericia")
  plots                Int                  @default(0) @map("parcelas")
  bodies               Int                  @default(0) @map("cuerpos")
  sheets               Int                  @default(0) @map("fojas")
  code                 String?              @default("Sin codigo definido") @map("codigo") @db.VarChar(128)
  codeOfSearch         String               @default("Indefinido") @map("codigo_de_busqueda") @db.VarChar(128)
  agrupationIdentifier String               @default("Indefinido") @map("id_de_agrupacion_social") @db.VarChar(64)
  secondState          String               @default("Indefinido") @map("estado_2") @db.VarChar(128)
  polygone             String               @map("poligono") @db.VarChar(32) // OJO
  observations         Observation[]
  beneficiaries        Beneficiary[]
  cityId               String               @map("departamento_id")
  provinceId           String               @map("provincia_id")
  municipalityId       String               @map("municipio_id")
  city                 City                 @relation(fields: [cityId], references: [id])
  province             Province             @relation(fields: [provinceId], references: [id])
  municipality         Municipality         @relation(fields: [municipalityId], references: [id])
  activity             Activity?            @relation(fields: [activityId], references: [id])
  activityId           String?              @map("actividad_id")
  type                 Type?                @relation(fields: [typeId], references: [id], map: "tipo")
  typeId               String?              @map("tipo_id")
  createdAt            DateTime             @default(now()) @map("fecha_de_creación")
  updatedAt            DateTime             @updatedAt @map("fecha_de_actualización")
  clasification        Clasification?       @relation(fields: [clasificationId], references: [id])
  clasificationId      String?              @map("clasificación_id")
  state                State?               @relation(fields: [stateId], references: [id])
  stateId              String?              @map("estado_id")
  groupedState         GroupedState?        @relation(fields: [groupedStateId], references: [id])
  groupedStateId       String?              @map("estado_agrupado_id")
  reference            Reference?           @relation(fields: [referenceId], references: [id])
  referenceId          String?              @map("referencia_id")
  fileNumber           FileNumber?
  technical            TechnicalOnProperty?
  legal                LegalOnProperty?
  trackings            Tracking[]
  responsibleUnit      Unit?                @relation(fields: [unitId], references: [id])
  unitId               String?              @map("unidad_responsable_id")
  folderLocation       FolderLocation?      @relation(fields: [folderLocationId], references: [id])
  folderLocationId     String?              @map("ubicación_de_carpeta_id")
  technicalObservation String?              @map("observacion_tecnica") @db.LongText()
  suscriptions         Subscription[]
  notifications        Notification[]

  @@map("predio")
}

model Tracking {
  id           String   @id @default(uuid())
  propertyId   String   @map("predio_id")
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId      String?  @map("estado_id")
  state        State?   @relation(fields: [stateId], references: [id])
  dateOfInit   String   @map("fecha_de_inicio")
  userId       String?  @map("usuario_id")
  responsible  User?    @relation(fields: [userId], references: [id])
  observation  String   @map("observación")
  numberOfNote String   @map("numero_de_nota")

  @@map("seguimiento")
}

model Unit {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(64)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]

  @@map("unidad")
}

model FolderLocation {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(64)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]

  @@map("ubicacion_de_carpeta")
}

model FileNumber {
  id         String   @id @default(uuid())
  number     String   @map("numero_de_expediente")
  propertyId String   @unique @map("predio_id")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("expediente")
}

model Observation {
  id          String   @id @default(uuid())
  observation String   @map("observacion") @db.MediumText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  propertyId  String   @map("predio_id")
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("observacion")
}

model Beneficiary {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(256)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]

  @@map("beneficiario")
}

model Reference {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(64)
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("referencia")
}

model State {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre")
  // order      String     @map("orden") @db.VarChar(16)
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  stageId    String?
  stage      Stage?     @relation(fields: [stageId], references: [id])
  trackings  Tracking[]

  @@map("estado")
}

model Stage {
  id        String   @id @default(uuid())
  name      String   @unique() @map("nombre") @db.VarChar(32)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  states    State[]

  @@map("etapa")
}

model Type {
  id   String @id @default(uuid())
  name String @unique @map("nombre") @db.VarChar(64)

  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("tipo")
}

model Activity {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(64)
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("actividad")
}

model Clasification {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(64)
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("clasificacion")
}

model GroupedState {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(128)
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("estado_agrupado")
}

model City {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(32)
  provinces  Province[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]

  @@map("departamento")
}

model Province {
  id             String         @id @default(uuid())
  code           String         @unique @map("codigo") @db.VarChar(32)
  name           String         @unique @map("nombre") @db.VarChar(32)
  cityId         String         @map("departamento_id")
  city           City           @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  municipalities Municipality[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  properties     Property[]

  @@map("provincia")
}

model Municipality {
  id         String     @id @default(uuid())
  name       String     @unique @map("nombre") @db.VarChar(32)
  provinceId String     @map("provincia_id")
  province   Province   @relation(fields: [provinceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Property   Property[]

  @@map("municipio")
}

model Record {
  id          String          @id @default(uuid())
  userId      String          @map("usuario_id")
  description String          @map("descripcion") @db.MediumText
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  operation   String          @map("operacion")
  action      LevelPermission @map("tipo_de_action")
  resource    Resource        @map("recurso")
  result      String          @map("resultado") @db.LongText
  ip          String          @map("direccion_ip")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("historial")
}

model Subscription {
  propertyId String   @map("predio_id")
  userId     String   @map("usuario_id")
  property   Property @relation(fields: [propertyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([propertyId, userId])
  @@map("Suscripcion")
}

model Notification {
  id         String   @id @default(uuid())
  title      String
  from       User     @relation(fields: [fromUserId], references: [id], name: "received")
  to         User     @relation(fields: [toUserId], references: [id], name: "sends")
  property   Property @relation(fields: [propertyId], references: [id])
  fieldName  String
  read       Boolean
  timeAgo    String
  toUserId   String
  fromUserId String
  propertyId String
}
